{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","window","_","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","searchInput","favItems","itemsToDisplay","faves","findme","assertThisInitialized","e","target","value","setState","console","log","request","get","json","JSON","parse","localStorage","getItem","getItems","filter","item","keywords","title","indexOf","_this2","encodedString","textarea","document","createElement","innerHTML","newFaves","union","setItem","stringify","without","includes","_this3","react_default","a","style","display","justifyContent","alignItems","height","marginTop","marginBottom","backgroundImage","color","onChange","onChangeSearch","paddingLeft","paddingRight","Input","flex","type","Button","marginLeft","backgroundColor","onClick","preventDefault","onSubmitSearch","icon","Icon","name","map","key","padding","onClickStar","getStarColor","size","dangerouslySetInnerHTML","__html","getDecodedString","body","length","margin","paddingTop","onClickFavStar","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40e4922e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport request from 'request-promise-native';\nimport 'semantic-ui-css/semantic.min.css'\nimport _ from 'underscore';\nimport {Icon, Button, Input} from 'semantic-ui-react';\n\nwindow._ = _;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      searchInput: '',\n      favItems: [],\n      itemsToDisplay: [],\n      faves: []\n    };\n\n    window.findme = this;\n  }\n\n  onChangeSearch(e) {\n    if (e.target.value === '') {\n      this.setState({itemsToDisplay: []});\n    }\n    this.setState({searchInput: e.target.value});\n    console.log()\n  }\n\n  async getItems() {\n    return await request.get('https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000', {json: true});\n  }\n\n  async componentDidMount() {\n    this.setState({faves: JSON.parse(localStorage.getItem(\"faves\")) || []});\n  }\n\n  async onSubmitSearch() {\n    console.log('seach submited');\n    const items = await this.getItems();\n    this.setState({items: items});\n    console.log(items);\n    const itemsToDisplay = _.filter(items, (item) => {\n      const keywords = item.keywords;\n      const title = item.title;\n      if (keywords.indexOf(this.state.searchInput) !== -1 || title.indexOf(this.state.searchInput) !== -1) {\n        return true;\n      }\n    });\n    this.setState({itemsToDisplay: itemsToDisplay});\n  }\n\n  getDecodedString(encodedString) {\n    const textarea  = document.createElement(\"textarea\");\n    textarea.innerHTML = encodedString;\n    return textarea.value;\n  }\n\n  onClickStar(item) {\n    const newFaves = _.union(this.state.faves, [item]);\n    this.setState({faves: newFaves});\n    localStorage.setItem(\"faves\", JSON.stringify(newFaves))\n  }\n\n  onClickFavStar(item) {\n    const newFaves = _.without(this.state.faves, item);\n    this.setState({faves: newFaves});\n    localStorage.setItem(\"faves\", JSON.stringify(newFaves))\n  }\n\n  getStarColor(title) {\n    return _.includes(this.state.faves, title) ? 'green' : 'grey';\n  }\n\n  render() {\n    return <div>\n      <div style={{display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '6rem',\n        marginTop: '1rem',\n        marginBottom: '1rem',\n        backgroundImage: 'linear-gradient(to right, rgb(0, 89, 151), rgb(0, 153, 88)'}}>\n        <h2 style={{color: 'white'}}>Toronto Waste Lookup</h2>\n      </div>\n      <form\n          onChange={(e) => {\n            this.onChangeSearch(e);\n          }}\n          style={{display: 'flex', paddingLeft: '1rem', paddingRight: '1rem'}}>\n        <Input style={{flex: '2'}} type='text'/>\n        <Button style={{marginLeft: '1rem', backgroundColor: '#009c55'}} onClick={(e) => {\n          e.preventDefault();\n          this.onSubmitSearch();\n        }} type='submit' icon>\n          <Icon style={{color: 'white'}} name='search'/>\n        </Button>\n      </form>\n      {_.map(this.state.itemsToDisplay, (item) => {\n        return <div key={item.title} style={{display: 'flex', paddingLeft: '1rem', paddingRight: '1rem'}}>\n          <div style={{flex: 1, padding: '1rem'}}>\n            <div style={{display: 'flex', alignItems: 'baseline'}}>\n              <Icon onClick={() => {\n                this.onClickStar(item);\n              }} color={this.getStarColor(item)} size='small' name='star'/>{item.title}\n              </div>\n            </div>\n          <div style={{flex: 1, padding: '1rem'}} dangerouslySetInnerHTML={{__html: this.getDecodedString(item.body)}}>\n          </div>\n        </div>\n      })}\n\n      {this.state.faves && this.state.faves.length !== 0 &&\n      <h3 style={{paddingLeft: '1rem', paddingRight: '1rem', backgroundColor: '#f5fefa', margin: '0rem', marginTop: '3rem', paddingTop: '1rem', color: '#009c55'}}>Favourites</h3>\n      }\n      {_.map(this.state.faves, (item) => {\n        return  <div key={item.title} style={{display: 'flex', backgroundColor: '#f5fefa', }}>\n          <div style={{flex: 1, padding: '1rem'}}>\n            <div style={{display: 'flex', alignItems: 'baseline'}}>\n              <Icon onClick={() => {\n                this.onClickFavStar(item);\n              }} color='green' size='small' name='star'/>{item.title}\n            </div>\n          </div>\n          <div style={{flex: 1, padding: '1rem'}} dangerouslySetInnerHTML={{__html: this.getDecodedString(item.body)}}>\n          </div>\n        </div>\n      })}\n\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}