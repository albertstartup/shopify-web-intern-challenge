{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","window","_","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","searchInput","favItems","itemsToDisplay","findme","assertThisInitialized","e","setState","target","value","console","log","request","get","json","getItems","filter","item","keywords","indexOf","_this2","encodedString","textarea","document","createElement","innerHTML","_this3","react_default","a","onChange","onChangeSearch","style","display","flex","type","onClick","preventDefault","onSubmitSearch","map","dangerouslySetInnerHTML","__html","getDecodedString","body","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qXCMxCC,OAAOC,EAAIA,QA4EIC,cAzEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,GACPC,YAAa,GACbC,SAAU,GACVC,eAAgB,IAGlBf,OAAOgB,OAAPX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,IAViBA,8EAaJc,GACbX,KAAKY,SAAS,CAACN,YAAaK,EAAEE,OAAOC,QACrCC,QAAQC,iKAIKC,IAAQC,IAAI,0EAA2E,CAACC,MAAM,oiBAQ3GJ,QAAQC,IAAI,2BACQhB,KAAKoB,kBAAnBf,SACNL,KAAKY,SAAS,CAACP,MAAOA,IACtBU,QAAQC,IAAIX,GACNG,EAAiBd,IAAE2B,OAAOhB,EAAO,SAACiB,GAEtC,IAAkD,IADjCA,EAAKC,SACTC,QAAQC,EAAKrB,MAAME,aAC9B,OAAO,IAGXN,KAAKY,SAAS,CAACJ,eAAgBA,+IAGhBkB,GACf,IAAMC,EAAYC,SAASC,cAAc,YAEzC,OADAF,EAASG,UAAYJ,EACdC,EAASb,uCAGT,IAAAiB,EAAA/B,KACP,OAAOgC,EAAAC,EAAAJ,cAAA,WACLG,EAAAC,EAAAJ,cAAA,QACIK,SAAU,SAACvB,GACToB,EAAKI,eAAexB,IAEtByB,MAAO,CAACC,QAAS,SACnBL,EAAAC,EAAAJ,cAAA,SAAOO,MAAO,CAACE,KAAM,KAAKC,KAAK,SAC/BP,EAAAC,EAAAJ,cAAA,SAAOW,QAAS,SAAC7B,GACfA,EAAE8B,iBACFV,EAAKW,kBACJH,KAAK,YAGP7C,IAAEiD,IAAI3C,KAAKI,MAAMI,eAAgB,SAACc,GACjC,OAAOU,EAAAC,EAAAJ,cAAA,OAAKO,MAAO,CAACC,QAAS,SAC3BL,EAAAC,EAAAJ,cAAA,OAAKO,MAAO,CAACE,KAAM,IAAKhB,EAAKC,UAC7BS,EAAAC,EAAAJ,cAAA,OAAKO,MAAO,CAACE,KAAM,GAAIM,wBAAyB,CAACC,OAAQd,EAAKe,iBAAiBxB,EAAKyB,oBAhE9EC,aCIEC,QACW,cAA7BxD,OAAOyD,SAASC,UAEe,UAA7B1D,OAAOyD,SAASC,UAEhB1D,OAAOyD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAJ,cAAC0B,EAAD,MAAS3B,SAAS4B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.53a6e11a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport request from 'request-promise-native';\nimport { Input } from 'semantic-ui-react';\nimport _ from 'underscore';\nwindow._ = _;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      searchInput: '',\n      favItems: [],\n      itemsToDisplay: []\n    };\n\n    window.findme = this;\n  }\n\n  onChangeSearch(e) {\n    this.setState({searchInput: e.target.value});\n    console.log()\n  }\n\n  async getItems() {\n    return await request.get('https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000', {json: true});\n  }\n\n  async componentDidMount() {\n\n  }\n\n  async onSubmitSearch() {\n    console.log('seach submited');\n    const items = await this.getItems();\n    this.setState({items: items});\n    console.log(items);\n    const itemsToDisplay = _.filter(items, (item) => {\n      const keywords = item.keywords;\n      if (keywords.indexOf(this.state.searchInput) !== -1) {\n        return true;\n      }\n    });\n    this.setState({itemsToDisplay: itemsToDisplay});\n  }\n\n  getDecodedString(encodedString) {\n    const textarea  = document.createElement(\"textarea\");\n    textarea.innerHTML = encodedString;\n    return textarea.value;\n  }\n\n  render() {\n    return <div>\n      <form\n          onChange={(e) => {\n            this.onChangeSearch(e);\n          }}\n          style={{display: 'flex'}}>\n        <input style={{flex: '2'}}type='text'/>\n        <input onClick={(e) => {\n          e.preventDefault();\n          this.onSubmitSearch();\n        }} type='submit'/>\n      </form>\n\n        {_.map(this.state.itemsToDisplay, (item) => {\n          return <div style={{display: 'flex'}}>\n            <div style={{flex: 1}}>{item.keywords}</div>\n            <div style={{flex: 1}} dangerouslySetInnerHTML={{__html: this.getDecodedString(item.body)}}>\n\n            </div>\n        </div>\n        })}\n\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}